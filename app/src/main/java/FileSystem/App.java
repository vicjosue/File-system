/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FileSystem;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.control.ToolBar;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.input.MouseEvent;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import jfxtras.styles.jmetro.FlatDialog;
import jfxtras.styles.jmetro.FlatTextInputDialog;
import jfxtras.styles.jmetro.JMetro;
import jfxtras.styles.jmetro.Style;

import java.io.IOException;
import java.util.Optional;

import FileSystem.UiComponents.ExplorerCell;
import FileSystem.Utilities.Archivo;
import FileSystem.Utilities.Directorio;
import FileSystem.Utilities.Fichero;
import FileSystem.Utilities.FileSystem;
import FileSystem.Utilities.Triplet;
import javafx.scene.control.ListCell;
import javafx.util.Callback;
import javafx.util.Pair;

public class App extends Application {
    FileSystem fileSystem = FileSystem.getInstance();
    TextField navigationTextField;
    ObservableList<Fichero> listItems;
    ToolBar navigationToolBar;
    BorderPane border;

    @Override
    public void start(Stage stage) {
        Button navigateUpButton = new Button("Up");
        navigateUpButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                fileSystem.ChangeDirUp();
            }
        });
        navigationTextField = new TextField();
        navigationTextField.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                navigateToDir();
            }
        });

        Button navigateGoButton = new Button("Go");
        navigateGoButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                navigateToDir();
            }
        });

        Button actionCopyButton = new Button("Copy");
        Button actionPasteButton = new Button("Paste");

        Button actionNewDirButton = new Button("New Dir");

        actionNewDirButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                createDir(stage);
            }
        });

        Button actionNewFileButton = new Button("New File");
        actionNewFileButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                createFile(stage);
            }
        });

        navigationToolBar = new ToolBar(
            navigateUpButton,
            navigationTextField,
            navigateGoButton,
            new Separator(),
            actionCopyButton,
            actionPasteButton,
            new Separator(),
            actionNewDirButton,
            actionNewFileButton
        );
       
        Button createFSButton = new Button("Create File System");
        createFSButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                createFS(stage);
            }
        });

        ToolBar initialToolbar = new ToolBar(
            createFSButton
        );
        
        ListView<Fichero> list = new ListView<Fichero>();
        Directorio actualDir = fileSystem.ChangeDirUp();
        listItems = FXCollections.observableArrayList (
            actualDir.getHashMap().values()
        );
        list.setItems(listItems);
        list.setOnMouseClicked(new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent click) {
        
                if (click.getClickCount() == 2) {
                   //Use ListView's getSelected Item
                   Fichero selected = list.getSelectionModel().getSelectedItem();
                   if (selected != null) {
                       openFichero(selected);
                   }
                }
                list.getSelectionModel().clearSelection();
            }
        });

        list.setCellFactory(new Callback<ListView<Fichero>, 
            ListCell<Fichero>>() {
                @Override 
                public ListCell<Fichero> call(ListView<Fichero> list) {
                    return new ExplorerCell();
                }
            }
        );

        border = new BorderPane();
        border.setTop(initialToolbar);
        border.setCenter(list);

        refreshView();
        fileSystem.changesCallback = fileSystem.navigateCallback = (Void) -> { refreshView(); return Void; };
        
        Scene scene = new Scene(border, 640, 480);

        JMetro jMetro = new JMetro(scene, Style.DARK);

        stage.setScene(scene);
        stage.show();
    }

    private void refreshView() {
        navigationTextField.setText(fileSystem.getActualPath());
        listItems.clear();
        listItems.addAll(fileSystem.getActualDirectory().getHashMap().values());
    }

    private void createDir(Stage owner) {
        FlatTextInputDialog dialog = new FlatTextInputDialog();
        dialog.initOwner(owner);
        dialog.setTitle("Create a new directory");
        dialog.setHeaderText("Create a new directory");
        dialog.setContentText("Enter directory name:");

        Optional<String> result = dialog.showAndWait();
        if (result.isPresent()){
            fileSystem.addFichero(result.get(), new Directorio(result.get()));
        }

    }

    private void createFile(Stage owner) {
        FlatDialog<Triplet<String, String, String>> dialog = new FlatDialog<Triplet<String, String, String>>();
        dialog.initOwner(owner);
        dialog.setTitle("Create a new file");
        dialog.setHeaderText("Create a new file");
        
        // Set the button types.
        ButtonType createButtonType = new ButtonType("Create", ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(createButtonType, ButtonType.CANCEL);

        // Create the username and password labels and fields.
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 150, 10, 10));

        TextField name = new TextField();
        TextField extension = new TextField();
        TextArea content = new TextArea();

        grid.add(new Label("Name:"), 0, 0);
        grid.add(name, 1, 0);
        grid.add(new Label("Extension:"), 0, 1);
        grid.add(extension, 1, 1);
        grid.add(new Label("Content:"), 0, 2);
        grid.add(content, 1, 2);

        dialog.getDialogPane().setContent(grid);

        Platform.runLater(() -> name.requestFocus());

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == createButtonType) {
                return new Triplet<>(name.getText(), extension.getText(), content.getText());
            }
            return null;
        });

        Optional<Triplet<String, String, String>> result = dialog.showAndWait();

        System.out.println(result);
        // TODO: Check response

    }

    private void createFS(Stage owner) {
        FlatDialog<Pair<String, String>> dialog = new FlatDialog<Pair<String, String>>();
        dialog.initOwner(owner);
        dialog.setTitle("Create a new FileSystem");
        dialog.setHeaderText("Create a new FileSystem");
        
        // Set the button types.
        ButtonType createButtonType = new ButtonType("Create", ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(createButtonType, ButtonType.CANCEL);

        // Create the username and password labels and fields.
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 150, 10, 10));

        TextField sectorCount = new TextField();
        TextField sectorSize = new TextField();

        sectorCount.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if (!newValue.matches("\\d{0,7}")) {
                    sectorCount.setText(oldValue);
                }
            }
        });

        sectorSize.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if (!newValue.matches("\\d{0,7}")) {
                    sectorSize.setText(oldValue);
                }
            }
        });

        

        grid.add(new Label("Sector count:"), 0, 0);
        grid.add(sectorCount, 1, 0);
        grid.add(new Label("Sector size:"), 0, 1);
        grid.add(sectorSize, 1, 1);

        dialog.getDialogPane().setContent(grid);

        Platform.runLater(() -> sectorCount.requestFocus());

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == createButtonType) {
                return new Pair<>(sectorCount.getText(), sectorSize.getText());
            }
            return null;
        });

        Optional<Pair<String, String>> result = dialog.showAndWait();

        if (result.isPresent()) {
            try {
                fileSystem.create(Integer.parseInt(result.get().getKey()), Integer.parseInt(result.get().getKey()));
                initToolbar();
            } catch(IOException e) {
                // TODO: Show exception
                System.out.println(e);
            }
            
        }

    }

    private void initToolbar() {
        border.setTop(navigationToolBar);
    }

    private void openFichero(Fichero item) {
        if (item instanceof Directorio) {
            fileSystem.ChangeDirDown(item.name);
        } else if (item instanceof Archivo) {

        }
    }

    private void navigateToDir() {
        fileSystem.goToDir(navigationTextField.getText());
    }

    public static void main(String[] args) {
        launch();
    }
}
